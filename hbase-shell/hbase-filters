
https://acadgild.com/blog/different-types-of-filters-in-hbase-shell
https://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/package-summary.html
https://acadgild.com/blog/different-types-of-filters-in-hbase-shell
https://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/package-summary.html
https://sparkbyexamples.com/hbase/hbase-table-filtering-data-like-where-clause/
https://www.guru99.com/hbase-shell-general-commands.html

-Hive Integration
https://acadgild.com/blog/hive-hbase-integration

#LIMIT SCAN
scan 'emp',{LIMIT => 3}

#STARTROW
scan 'emp',{LIMIT => 3, STARTROW => '100'}

#COLUMNS
scan 'emp',{COLUMNS => ['personal data:name']}

#FirstKeyOnlyFilter
	- This filter doesn’t take any arguments. A filter that will only return the first KV from each row.

	scan 'emp',{FILTER => "FirstKeyOnlyFilter()"}

#KeyOnlyFilter
	- This filter doesn’t take any arguments. It returns solely the key part of every key-value.
	- A filter that will only return the key component of each KV (the value will be rewritten as empty).

	scan 'emp',{FILTER => "KeyOnlyFilter()"}	


#prefixfilter:
	- This filter takes one argument as a prefix of a row key. 
	- It returns solely those key-values present in the very row that starts with the specified row prefix.
	
	scan 'emp',{FILTER => "PrefixFilter('1')"}

#ColumnPrefixFilter
	- This filter takes one argument as column prefix. 
	- It returns solely those key-values present in the very column that starts with the specified column prefix. 
	- The column prefix should be the form qualifier.

	scan 'emp',{FILTER => "ColumnPrefixFilter('name')"}
	scan 'emp',{FILTER => "ColumnPrefixFilter('name') AND PrefixFilter('300')"}

#MultipleColumnPrefixFilter
	- This filter takes a listing of column prefixes. 
	- It returns key-values that are present in the very column that starts with any of the specified column prefixes. 
	- Every column prefixes should be a form qualifier.	
	
	scan 'emp',{FILTER => "MultipleColumnPrefixFilter('name','address')"}

#ColumnCountGetFilter
	-Simple filter that returns first N columns on row only. It returns the primary limit number of columns within the table.
	
	scan 'emp',{FILTER => ColumnCountGetFilter(0)}
	scan 'emp',{FILTER => ColumnCountGetFilter(1)}
	scan 'emp',{FILTER => ColumnCountGetFilter(3)}
	
#PageFilter
	- This filter takes one argument a page size. 
	- It returns page size number of the rows from the table.	
	
	scan 'emp',{FILTER => PageFilter(1)}
	
#QualifierFilter (compar,Column Qualifier)
	- This filter takes a compare operator and a comparator. 
	- It compares every qualifier name with the comparator using the compare operator 
	- and if the comparison returns true, it returns all the key-values in this column.
	This filter is used to filter based on the column qualifier.
	
	scan 'emp',{FILTER => "QualifierFilter(=, 'binary:name')"}
	scan 'emp',{FILTER => "QualifierFilter(>, 'binary:name')"}
	scan 'emp',{FILTER => "QualifierFilter(<, 'binary:name')"}
	scan 'emp',{FILTER => "QualifierFilter(>=, 'binary:name')"}
	scan 'emp',{FILTER => "QualifierFilter(!=, 'binary:name')"}


#InclusiveStopFilter
	- This filter takes one argument as row key on that to prevent scanning. 
	- It returns all key-values present in rows together with the specified row.	
	
	scan 'emp',{FILTER => InclusiveStopFilter('300')}
	
#ValueFilter
	- This filter takes a compare operator and a comparator. 
	- It compares every value with the comparator using the compare operator
	- and if the comparison returns true, it returns that key-value.	
	
	scan 'emp',{FILTER => "ValueFilter(=,'binaryprefix:m')"}
	scan 'emp',{FILTER => "ValueFilter(!=,'binaryprefix:m')"}
	scan 'emp',{FILTER => "ValueFilter(>=,'binaryprefix:m')"}

#SingleColumnValueFilter
	-This filter as an argument takes a column family, a qualifier, a compare operator and a comparator. 
	- So, if the specified column isn’t found, all the columns of that row are going to be emitted. 
	- And ,If the column is found and also the comparison with the comparator returns true, 
	- all the columns of the row are going to be emitted. If the condition fails, the row won’t be emitted.
	
	scan 'emp',{FILTER => SingleColumnValueFilter('personal data','name',=,'binary:name',true, true)} 
		

#Count Command
	COUNT 'emp', CACHE => 1000
	COUNT 'emp', INTERVAL => 1000, CACHE=> 1000
	COUNT 'emp', INTERVAL => 1, CACHE=> 1000
		
#Delete command
	- delete 'table name','row name','column name'
	- This will delete a particular cell.
	
	- deleteall 'table name','row name'
	- This will delete all the values of a row 
	
	-truncate 'tablename'

#Alternative way of filtering.	
import org.apache.hadoop.hbase.filter.SingleColumnValueFilter
import org.apache.hadoop.hbase.filter.CompareFilter
import org.apache.hadoop.hbase.filter.BinaryComparator

 scan 'emp', { FILTER => SingleColumnValueFilter.new(Bytes.toBytes('personal data'), 
Bytes.toBytes('name'), CompareFilter::CompareOp.valueOf('EQUAL'),BinaryComparator.new(Bytes.toBytes('sharan')))}

 	
